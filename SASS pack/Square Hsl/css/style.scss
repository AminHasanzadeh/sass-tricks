*, *::before, *::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
//$mainSize is the size of the whole trick . change it for more results
//delayfactor is a constant value .
//amount is the count of squares
$mainSize: 100px;
$delayFactor: 0.05s;
$amount: 100;
body {
    background-color: #111;
    overflow: hidden;
}
.scene {
    width: 100%;
    height: 100vmin;
    position: relative;
    margin-top: 200px;
    .square {
        width: $mainSize;
        height: $mainSize;
        box-shadow: 0 0 5px 4px rgba($color: #000000, $alpha: 0.4);
        position: absolute;
        transform-style: preserve-3d;
        transform-origin: center;
        animation: rotate 6s ease-in-out infinite alternate;
        @for $i from 1 through $amount {
            &:nth-child(#{$i}) {
                left: (-1% + (1% * $i));
                background: hsl((360 / $amount) * $i, 70%, 60%);
                animation-delay: -($i * $delayFactor);
            }
        }
    }
}
//main animation of this trick . you can see that . waves created just by delays
@keyframes rotate {
    from {
        transform: rotate(0) translateY(0);
    }
    to {
        transform: rotate(720deg) translateY($mainSize);
    }
}